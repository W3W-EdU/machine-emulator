name: Build/Test/Verify/Release
on: [push]
env:
  ROM_VERSION: v0.4.0
  KERNEL_VERSION: v0.7.0
  ROOTFS_VERSION: v0.6.0
  TEST_VERSION: v0.8.0
  GROUND_TRUTH_VERSION: v0.8.0-0004
  BUILD_CACHE_VERSION: v0.6.0-0001
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libreadline-dev libboost-container-dev libboost-program-options-dev libboost-serialization-dev protobuf-compiler protobuf-compiler-grpc libprotobuf-dev libgrpc++-dev patchelf automake

      - name: Download cache of third-party build
        run: aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION} ./build && test -f ./build/`uname`_`uname -m`/bin/luapp5.3
        id: download_cache
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build third-party dependencies
        id: build_dep
        if: ${{ steps.download_cache.outcome == 'failure' }}
        run: make -j$(nproc) dep

      - name: Cache third-party build
        if: ${{ steps.build_dep.outcome == 'success' }}
        run: aws s3 sync ./build s3://cartesi-ci/${GITHUB_REPOSITORY}/cache/build-${BUILD_CACHE_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build
        run: make -j$(nproc)

      - name: Install [/opt/cartesi]
        run: make install

      - name: Fix install permissions [/opt/cartesi]
        run: find /opt/cartesi -type d -exec chmod 755 {} +

      - name: Upload emulator
        uses: actions/upload-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

  test:
    name: Test
    needs: build
    runs-on: ubuntu-20.04
    steps:
      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install directories and permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Install Ubuntu dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libboost-program-options1.71.0 libboost-serialization1.71.0 libprotobuf17 libprotobuf-lite17 libgrpc++1 netcat

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-5.5.19-ctsi-2.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to cartesi images folder
        run: |
          mv rom.bin linux-5.5.19-ctsi-2.bin rootfs.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-5.5.19-ctsi-2.bin linux.bin

      - name: Simple Boot
        run: /opt/cartesi/bin/cartesi-machine /bin/true

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Run test suite
        run: /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

      - name: Run test suite on GRPC server
        run: |
          /opt/cartesi/bin/cartesi-machine-server 127.0.0.1:5001 &
          timeout 20 bash -c 'while ! nc -q0 127.0.0.1 5001 < /dev/null > /dev/null 2>&1; do sleep 1; done'
          /opt/cartesi/bin/cartesi-machine-tests --server=127.0.0.1:5001 --test-path=/opt/cartesi/tests run
          pkill -f cartesi-machine-server || true

      - name: Checkout emulator source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Run test scripts
        run: |
          export CARTESI_IMAGES_PATH=/opt/cartesi/share/images
          export CARTESI_TESTS_PATH=/opt/cartesi/tests
          cd src && for x in `find tests -maxdepth 1 -type f -name "*.lua"` ; do /opt/cartesi/bin/luapp5.3 $x; done

  verify:
    name: Verify
    needs: build
    runs-on: ubuntu-20.04
    timeout-minutes: 600
    if: ${{ contains(github.ref, '-rc') || endsWith(github.ref, 'verify') }}
    steps:
      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Create images folder
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install directories and permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Install Ubuntu dependencies
        run: sudo apt-get update -y && sudo apt-get install -y libboost-program-options1.71.0 libboost-serialization1.71.0 libprotobuf17 libprotobuf-lite17 libgrpc++1

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Checkout emulator source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Download ground truth logs cache
        id: download_ground_truth_logs
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ./src/ground-truth
          aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/logs-${GROUND_TRUTH_VERSION} ./src/ground-truth/logs && test -f ./src/ground-truth/logs/1/dont_write_x0.json.br

      - name: Generate test machine initial state
        id: gen_init_state
        if: ${{ steps.download_ground_truth_logs.outcome == 'failure' }}
        run: |
          mkdir -p ./src/ground-truth/machine-init-state && cd ./src/ground-truth/machine-init-state
          /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests dump
          /opt/cartesi/bin/cartesi-machine-tests --json-test-list list > test_list.json
          rm -f 0000000080000000*.bin
          cd .. && tar -czf machine-init-state.tar.gz ./machine-init-state

      - name: Upload test machine initial state
        if: ${{ steps.gen_init_state.outcome == 'success' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp ./src/ground-truth/machine-init-state.tar.gz s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/machine-init-state-${GROUND_TRUTH_VERSION}.tar.gz

      - name: Generate ground truth logs
        id: gen_logs
        if: ${{ steps.download_ground_truth_logs.outcome == 'failure' }}
        run: |
          export PATH=/opt/cartesi/bin:$PATH LUA_BIN=/opt/cartesi/bin/luapp5.3 TEST_PATH=/opt/cartesi/tests && cd ./src
          make -j$(nproc) CYCLE_PERIOD=1 truth-logs

      - name: Upload ground truth logs
        if: ${{ steps.gen_logs.outcome == 'success' }}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws s3 sync ./src/ground-truth/logs s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/logs-${GROUND_TRUTH_VERSION}

      - name: Verify logs against ground truth
        run: |
          export PATH=/opt/cartesi/bin:$PATH LUA_BIN=/opt/cartesi/bin/luapp5.3 TEST_PATH=/opt/cartesi/tests && cd ./src
          make -j$(nproc) CYCLE_PERIOD=1 test-logs

      - name: Download ground truth hashes cache
        id: download_ground_truth_hashes
        continue-on-error: true
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          mkdir -p ./src/ground-truth
          aws s3 sync s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/hashes-${GROUND_TRUTH_VERSION} ./src/ground-truth/hashes && test -f ./src/ground-truth/hashes/1/dont_write_x0.hashes

      - name: Generate ground truth hashes
        id: gen_hashes
        if: ${{ steps.download_ground_truth_hashes.outcome == 'failure' }}
        run: |
          export PATH=/opt/cartesi/bin:$PATH LUA_BIN=/opt/cartesi/bin/luapp5.3 TEST_PATH=/opt/cartesi/tests && cd ./src
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=1 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=2 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=3 truth-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=13 truth-hashes

      - name: Upload ground truth logs and hashes cache
        if: ${{ steps.gen_hashes.outcome == 'success' }}
        run: aws s3 sync ./src/ground-truth/hashes s3://cartesi-ci/${GITHUB_REPOSITORY}/ground-truth/hashes-${GROUND_TRUTH_VERSION}
        env:
          AWS_REGION: 'us-east-1'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Verify hashes against ground truth
        run: |
          export PATH=/opt/cartesi/bin:$PATH LUA_BIN=/opt/cartesi/bin/luapp5.3 TEST_PATH=/opt/cartesi/tests && cd ./src
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=1 test-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=2 compare-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=3 compare-hashes
          make -j$(nproc) CONCURRENCY_MERKLE_TREE=1 CYCLE_PERIOD=13 compare-hashes

  ubuntu-image-build:
    name: Build and Test Ubuntu based Docker image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout emulator source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup docker image tags
        id: docker_image_tags
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tag-semver: |
            {{version}}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.ubuntu-buildx-cache
          key: ${{ runner.os }}-ubuntu-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ubuntu-buildx-

      - name: Build Ubuntu based docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: .github/workflows/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.ubuntu-buildx-cache
          cache-to: type=local,dest=/tmp/.ubuntu-buildx-cache

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-5.5.19-ctsi-2.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to cartesi images folder
        run: |
          mkdir -m 755 -p /opt/cartesi/share/images
          mv rom.bin linux-5.5.19-ctsi-2.bin rootfs.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-5.5.19-ctsi-2.bin linux.bin

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Set default tag name
        id: docker_image_default_tag
        run: echo ::set-output name=name::$(echo "${{ steps.docker_image_tags.outputs.tags }}" | head -n 1 | xargs)

      - name: Simple boot inside the docker image (Ubuntu)
        run: docker run --rm -v /opt/cartesi/share/images:/opt/cartesi/share/images -t ${{ steps.docker_image_default_tag.outputs.name }} /opt/cartesi/bin/cartesi-machine /bin/true

      - name: Run test suite inside the docker image (Ubuntu)
        run: docker run --rm -v /opt/cartesi/tests:/opt/cartesi/tests -t ${{ steps.docker_image_default_tag.outputs.name }} /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

  alpine-image-build:
    name: Build and Test Alpine based Docker image
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout emulator source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup docker image tags
        id: docker_image_tags
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tag-semver: |
            {{version}}-alpine

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.alpine-buildx-cache
          key: ${{ runner.os }}-alpine-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-alpine-buildx-

      - name: Build Alpine based Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: .github/workflows/Dockerfile.alpine
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.docker_image_tags.outputs.tags }}
          push: false
          load: true
          cache-from: type=local,src=/tmp/.alpine-buildx-cache
          cache-to: type=local,dest=/tmp/.alpine-buildx-cache

      - name: Download [rootfs.ext2]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-rootfs
          tag: ${{ env.ROOTFS_VERSION }}
          file: rootfs.ext2
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [kernel.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/image-kernel
          tag: ${{ env.KERNEL_VERSION }}
          file: linux-5.5.19-ctsi-2.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Download [rom.bin]
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-emulator-rom
          tag: ${{ env.ROM_VERSION }}
          file: rom.bin
          token: ${{ secrets.CI_TOKEN }}

      - name: Move images to cartesi images folder
        run: |
          mkdir -m 755 -p /opt/cartesi/share/images
          mv rom.bin linux-5.5.19-ctsi-2.bin rootfs.ext2 /opt/cartesi/share/images/
          cd /opt/cartesi/share/images/ && ln -s linux-5.5.19-ctsi-2.bin linux.bin

      - name: Download test suite
        uses: Legion2/download-release-action@v2.1.0
        with:
          repository: ${{ github.repository_owner }}/machine-tests
          tag: ${{ env.TEST_VERSION }}
          file: machine-tests-${{ env.TEST_VERSION }}.tar.gz
          token: ${{ secrets.CI_TOKEN }}

      - name: Untar test suite
        run: mkdir -p /opt/cartesi/tests && tar -xzf machine-tests-${TEST_VERSION}.tar.gz -C /opt/cartesi/tests

      - name: Set default tag name
        id: docker_image_default_tag
        run: echo ::set-output name=name::$(echo "${{ steps.docker_image_tags.outputs.tags }}" | head -n 1 | xargs)

      - name: Simple boot inside the docker image (Alpine)
        run: docker run --rm -v /opt/cartesi/share/images:/opt/cartesi/share/images -t ${{ steps.docker_image_default_tag.outputs.name }} /opt/cartesi/bin/cartesi-machine /bin/true

      - name: Run test suite inside the docker image (Alpine)
        run: docker run --rm -v /opt/cartesi/tests:/opt/cartesi/tests -t ${{ steps.docker_image_default_tag.outputs.name }} /opt/cartesi/bin/cartesi-machine-tests --test-path=/opt/cartesi/tests run

  publish_images:
    name: Publish Docker images
    needs: [test, ubuntu-image-build, alpine-image-build]
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/v') || (github.ref == 'refs/heads/develop') }}
    steps:
      - name: Checkout emulator source code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}

      - name: Setup ubuntu docker image tags
        id: ubuntu_docker_image_tags
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tag-semver: |
            {{version}}

      - name: Setup alpine docker image tags
        id: alpine_docker_image_tags
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_ORGANIZATION }}/machine-emulator
          tag-semver: |
            {{version}}-alpine

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Ubuntu Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.ubuntu-buildx-cache
          key: ${{ runner.os }}-ubuntu-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ubuntu-buildx-

      - name: Cache Alpine Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.alpine-buildx-cache
          key: ${{ runner.os }}-alpine-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-alpine-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Ubuntu based docker image
        id: ubuntu_docker_build
        uses: docker/build-push-action@v2
        with:
          file: .github/workflows/Dockerfile
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.ubuntu_docker_image_tags.outputs.tags }}
          push: true
          load: false
          cache-from: type=local,src=/tmp/.ubuntu-buildx-cache
          cache-to: type=local,dest=/tmp/.ubuntu-buildx-cache

      - name: Build Alpine based Docker image
        id: alpine_docker_build
        uses: docker/build-push-action@v2
        with:
          file: .github/workflows/Dockerfile.alpine
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64
          tags: ${{ steps.alpine_docker_image_tags.outputs.tags }}
          push: true
          load: false
          cache-from: type=local,src=/tmp/.alpine-buildx-cache
          cache-to: type=local,dest=/tmp/.alpine-buildx-cache

  release:
    name: Release machine emulator tarball
    needs: [test, ubuntu-image-build, alpine-image-build]
    runs-on: ubuntu-20.04
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download emulator
        uses: actions/download-artifact@master
        with:
          name: emulator
          path: /opt/cartesi

      - name: Recreate images folder before packaging
        run: mkdir -m 755 -p /opt/cartesi/share/images

      - name: Fix install permissions [/opt/cartesi]
        run: |
          find /opt/cartesi -type d -exec chmod 755 {} +
          find /opt/cartesi -type f -exec chmod 644 {} +
          find /opt/cartesi/bin -type f \! -iname "*.lua" -exec chmod 755 {} +
          find /opt/cartesi/lib -type f -exec chmod 755 {} +

      - name: Create TAR
        run: tar -czf machine-emulator-`uname`-${GITHUB_REF:10}.tar.gz -C /opt/cartesi .

      - name: Upload TAR to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          files: machine-emulator-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
