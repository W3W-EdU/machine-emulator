use std::fs::{self, File};
use std::io::Read;
use methods::{
    TESTE1_ELF, TESTE1_ID
};
use risc0_zkvm::{
        default_prover, 
        ExecutorEnv };

pub struct PageInfo {
    pub address: u64,
    pub data: [u8; 4986],
}

fn load_pages(dir_path: &str) -> Vec<PageInfo> {
    let mut files = fs::read_dir(dir_path)
        .expect("Could not read directory")
        .filter_map(|entry| {
            let entry = entry.ok()?;
            let path = entry.path();
            if path.is_file() {
                Some(path)
            } else {
                None
            }
        })
        .collect::<Vec<_>>();

    files.sort_by_key(|path| {
        u64::from_str_radix(path.file_name().unwrap().to_str().unwrap(), 16).unwrap()
    });
    let mut pages = Vec::new();
    for file_path in files {
        let filename = file_path.file_name().unwrap().to_str().unwrap();
        let address = u64::from_str_radix(filename, 16).unwrap();
        let mut file = File::open(&file_path).expect("Could not open file");
        let mut data = [0 as u8; 4986];
        // read file contents and push a new page info
        file.read(&mut data).expect("Could not read file contents");
        pages.push(PageInfo {
            address,
            data,
        });
    }
    pages
}

// Page files generated by the following command:
// mkdir -p /tmp/loxa3
// cartesi-machine.lua  --max-mcycle=0 --log-steps=1,/tmp/loxa3
fn main() {
    let pages = load_pages("/tmp/loxa3");
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let mut builder = ExecutorEnv::builder();
    // stupid way to send pages to the guest. Will improve later.
    builder.write(&pages.len()).unwrap();
    let mut temp: [u8; 32] = [0; 32];
    for page in pages {
        builder.write(&page.address).unwrap();
        println!("writing page: {:x}", page.address);
        for i in (0..4096).step_by(32) {
            temp.copy_from_slice(&page.data[i..(i + 32)]);
            builder.write(&temp).unwrap();
        }
    }
    
    let env = builder.build().unwrap();

    let prover = default_prover();
    let receipt = prover
        .prove(env, TESTE1_ELF)
        .unwrap();

     let output:u64 = receipt.journal.decode().unwrap();
    println!("result: {:x}", output);
    receipt
        .verify(TESTE1_ID)
        .unwrap();
}
